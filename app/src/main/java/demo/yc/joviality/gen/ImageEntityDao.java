package demo.yc.joviality.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import demo.yc.joviality.entity.ImageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "image_collection".
*/
public class ImageEntityDao extends AbstractDao<ImageEntity, Long> {

    public static final String TABLENAME = "image_collection";

    /**
     * Properties of entity ImageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DownloadUrl = new Property(1, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ImageWidth = new Property(3, int.class, "imageWidth", false, "IMAGE_WIDTH");
        public final static Property ImageHeight = new Property(4, int.class, "imageHeight", false, "IMAGE_HEIGHT");
        public final static Property ThumbnailUrl = new Property(5, String.class, "thumbnailUrl", false, "THUMBNAIL_URL");
        public final static Property ThumbnailWidth = new Property(6, int.class, "thumbnailWidth", false, "THUMBNAIL_WIDTH");
        public final static Property ThumbnailHeight = new Property(7, int.class, "thumbnailHeight", false, "THUMBNAIL_HEIGHT");
    }


    public ImageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ImageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"image_collection\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DOWNLOAD_URL\" TEXT," + // 1: downloadUrl
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"IMAGE_WIDTH\" INTEGER NOT NULL ," + // 3: imageWidth
                "\"IMAGE_HEIGHT\" INTEGER NOT NULL ," + // 4: imageHeight
                "\"THUMBNAIL_URL\" TEXT," + // 5: thumbnailUrl
                "\"THUMBNAIL_WIDTH\" INTEGER NOT NULL ," + // 6: thumbnailWidth
                "\"THUMBNAIL_HEIGHT\" INTEGER NOT NULL );"); // 7: thumbnailHeight
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"image_collection\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(2, downloadUrl);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getImageWidth());
        stmt.bindLong(5, entity.getImageHeight());
 
        String thumbnailUrl = entity.getThumbnailUrl();
        if (thumbnailUrl != null) {
            stmt.bindString(6, thumbnailUrl);
        }
        stmt.bindLong(7, entity.getThumbnailWidth());
        stmt.bindLong(8, entity.getThumbnailHeight());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(2, downloadUrl);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getImageWidth());
        stmt.bindLong(5, entity.getImageHeight());
 
        String thumbnailUrl = entity.getThumbnailUrl();
        if (thumbnailUrl != null) {
            stmt.bindString(6, thumbnailUrl);
        }
        stmt.bindLong(7, entity.getThumbnailWidth());
        stmt.bindLong(8, entity.getThumbnailHeight());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ImageEntity readEntity(Cursor cursor, int offset) {
        ImageEntity entity = new ImageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // downloadUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.getInt(offset + 3), // imageWidth
            cursor.getInt(offset + 4), // imageHeight
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbnailUrl
            cursor.getInt(offset + 6), // thumbnailWidth
            cursor.getInt(offset + 7) // thumbnailHeight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownloadUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageWidth(cursor.getInt(offset + 3));
        entity.setImageHeight(cursor.getInt(offset + 4));
        entity.setThumbnailUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setThumbnailWidth(cursor.getInt(offset + 6));
        entity.setThumbnailHeight(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
